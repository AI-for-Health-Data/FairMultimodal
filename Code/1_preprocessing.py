{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "59f169e8-afdc-49d6-a61a-5327b452f9ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/d7/1jjz4hpd3s771hd3c98czx1c0000gn/T/ipykernel_19317/1409765335.py:7: DtypeWarning: Columns (8) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  chartevents = pd.read_csv('CHARTEVENTS.csv.gz', compression='gzip', usecols=['SUBJECT_ID', 'HADM_ID', 'ITEMID', 'CHARTTIME', 'VALUE'])\n",
      "/var/folders/d7/1jjz4hpd3s771hd3c98czx1c0000gn/T/ipykernel_19317/1409765335.py:61: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  merged_data['ventilation_within_6_hours'].fillna(0, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load MIMIC-III data\n",
    "admissions = pd.read_csv('ADMISSIONS.csv.gz', compression='gzip')\n",
    "patients = pd.read_csv('PATIENTS.csv.gz', compression='gzip')\n",
    "icu_stays = pd.read_csv('ICUSTAYS.csv.gz', compression='gzip')\n",
    "chartevents = pd.read_csv('CHARTEVENTS.csv.gz', compression='gzip', usecols=['SUBJECT_ID', 'HADM_ID', 'ITEMID', 'CHARTTIME', 'VALUE'])\n",
    "\n",
    "# Convert relevant columns to datetime format\n",
    "admissions['ADMITTIME'] = pd.to_datetime(admissions['ADMITTIME'])\n",
    "icu_stays['INTIME'] = pd.to_datetime(icu_stays['INTIME'])\n",
    "chartevents['CHARTTIME'] = pd.to_datetime(chartevents['CHARTTIME'])\n",
    "\n",
    "# Rename columns for consistency\n",
    "admissions.rename(columns={'SUBJECT_ID': 'subject_id', 'HADM_ID': 'hadm_id'}, inplace=True)\n",
    "patients.rename(columns={'SUBJECT_ID': 'subject_id'}, inplace=True)\n",
    "icu_stays.rename(columns={'SUBJECT_ID': 'subject_id', 'HADM_ID': 'hadm_id'}, inplace=True)\n",
    "chartevents.rename(columns={'SUBJECT_ID': 'subject_id', 'HADM_ID': 'hadm_id'}, inplace=True)\n",
    "\n",
    "# Merge patients and admissions tables to get patient and admission details\n",
    "merged_data = pd.merge(admissions, patients, on='subject_id', how='inner')\n",
    "\n",
    "# Calculate short-term mortality (death within 30 days of discharge)\n",
    "merged_data['short_term_mortality'] = ((pd.to_datetime(merged_data['DEATHTIME']) - pd.to_datetime(merged_data['DISCHTIME'])).dt.days <= 30).astype(int)\n",
    "\n",
    "# Calculate readmission within 30 days\n",
    "merged_data = merged_data.sort_values(by=['subject_id', 'ADMITTIME'])\n",
    "merged_data['readmitted_within_30_days'] = (merged_data.groupby('subject_id')['ADMITTIME'].diff().dt.days <= 30).astype(int)\n",
    "\n",
    "# Define ITEMIDs for mechanical ventilation (common set from academic papers)\n",
    "mechanical_ventilation_ids = [720, 223849, 223848, 445, 448, 449, 450, 1340, 1486, 1600, 224687, 639, 654, 681, 682, 683, 684, \n",
    "                              224685, 224684, 224686, 218, 436, 535, 444, 224697, 224695, 224696, 224746, 224747, 543, 5865, \n",
    "                              5866, 224707, 224709, 224705, 224706, 60, 437, 505, 506, 686, 220339, 224700, 3459, 501, 502, \n",
    "                              503, 224702, 223, 667, 668, 669, 670, 671, 672, 224701]\n",
    "\n",
    "# Filter CHARTEVENTS based on these ITEMIDs\n",
    "mechanical_ventilation = chartevents[chartevents['ITEMID'].isin(mechanical_ventilation_ids)].copy()\n",
    "\n",
    "# Add a column to indicate mechanical ventilation presence\n",
    "mechanical_ventilation['mechanical_ventilation'] = 1\n",
    "\n",
    "# Drop duplicates to avoid multiple records for the same admission\n",
    "mechanical_ventilation = mechanical_ventilation[['subject_id', 'hadm_id', 'mechanical_ventilation', 'CHARTTIME']].drop_duplicates()\n",
    "\n",
    "# Merge the mechanical ventilation data with ICU stay data to get admission times\n",
    "mechanical_ventilation = pd.merge(mechanical_ventilation, icu_stays[['subject_id', 'hadm_id', 'ICUSTAY_ID', 'INTIME']], on=['subject_id', 'hadm_id'], how='left')\n",
    "\n",
    "# Calculate time difference between ventilation and ICU admission (in hours)\n",
    "mechanical_ventilation['time_since_admission'] = (mechanical_ventilation['CHARTTIME'] - mechanical_ventilation['INTIME']).dt.total_seconds() / 3600\n",
    "\n",
    "# Create a new column to indicate ventilation within 6 hours\n",
    "mechanical_ventilation['ventilation_within_6_hours'] = (mechanical_ventilation['time_since_admission'] <= 6).astype(int)\n",
    "\n",
    "# Drop duplicates to ensure one row per admission\n",
    "mechanical_ventilation = mechanical_ventilation[['subject_id', 'hadm_id', 'ventilation_within_6_hours']].drop_duplicates()\n",
    "\n",
    "# Merge the result back with the merged_data to get ventilation within 6 hours for each patient\n",
    "merged_data = pd.merge(merged_data, mechanical_ventilation, on=['subject_id', 'hadm_id'], how='left')\n",
    "\n",
    "# Fill NaN values with 0 (for patients with no ventilation within 6 hours)\n",
    "merged_data['ventilation_within_6_hours'].fillna(0, inplace=True)\n",
    "\n",
    "# Convert to integer type\n",
    "merged_data['ventilation_within_6_hours'] = merged_data['ventilation_within_6_hours'].astype(int)\n",
    "\n",
    "# Extract the first admission of each patient\n",
    "first_admissions = merged_data.sort_values(by=['subject_id', 'ADMITTIME']).groupby('subject_id').first().reset_index()\n",
    "\n",
    "# Update the columns to reflect any positive case for each patient across all admissions\n",
    "# Using transform to propagate the maximum of any occurrence of short-term mortality, readmission, and ventilation\n",
    "first_admissions['short_term_mortality'] = merged_data.groupby('subject_id')['short_term_mortality'].transform('max')\n",
    "first_admissions['readmitted_within_30_days'] = merged_data.groupby('subject_id')['readmitted_within_30_days'].transform('max')\n",
    "first_admissions['ventilation_within_6_hours'] = merged_data.groupby('subject_id')['ventilation_within_6_hours'].transform('max')\n",
    "\n",
    "# Ensure that we only keep the first admission per patient\n",
    "first_admissions = first_admissions.drop_duplicates(subset='subject_id', keep='first').reset_index(drop=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4882fcd0-81b7-4d11-a0d1-123ed599a716",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate age\n",
    "def calculate_age(dob, admittime):\n",
    "    return admittime.year - dob.year - ((admittime.month, admittime.day) < (dob.month, dob.day))\n",
    "\n",
    "first_admissions['age'] = first_admissions.apply(lambda x: calculate_age(pd.to_datetime(x['DOB']), x['ADMITTIME']), axis=1)\n",
    "first_admissions = first_admissions[(first_admissions['age'] >= 15) & (first_admissions['age'] <= 90)]\n",
    "\n",
    "# Categorize age\n",
    "def categorize_age(age):\n",
    "    if 15 <= age <= 29:\n",
    "        return '15-29'\n",
    "    elif 30 <= age <= 49:\n",
    "        return '30-49'\n",
    "    elif 50 <= age <= 69:\n",
    "        return '50-69'\n",
    "    else:\n",
    "        return '70-89'\n",
    "\n",
    "first_admissions['age_bucket'] = first_admissions['age'].apply(categorize_age)\n",
    "\n",
    "def categorize_ethnicity(ethnicity):\n",
    "    ethnicity = ethnicity.upper()\n",
    "    if ethnicity in [\n",
    "        'WHITE', 'WHITE - RUSSIAN', 'WHITE - OTHER EUROPEAN', \n",
    "        'WHITE - BRAZILIAN', 'WHITE - EASTERN EUROPEAN'\n",
    "    ]:\n",
    "        return 'White'\n",
    "    elif ethnicity in [\n",
    "        'BLACK/AFRICAN AMERICAN', 'BLACK/CAPE VERDEAN', \n",
    "        'BLACK/HAITIAN', 'BLACK/AFRICAN', 'CARIBBEAN ISLAND'\n",
    "    ]:\n",
    "        return 'Black'\n",
    "    elif ethnicity in [\n",
    "        'HISPANIC OR LATINO', 'HISPANIC/LATINO - PUERTO RICAN', \n",
    "        'HISPANIC/LATINO - DOMINICAN', 'HISPANIC/LATINO - GUATEMALAN', \n",
    "        'HISPANIC/LATINO - CUBAN', 'HISPANIC/LATINO - SALVADORAN', \n",
    "        'HISPANIC/LATINO - CENTRAL AMERICAN (OTHER)', \n",
    "        'HISPANIC/LATINO - MEXICAN', 'HISPANIC/LATINO - COLOMBIAN', \n",
    "        'HISPANIC/LATINO - HONDURAN'\n",
    "    ]:\n",
    "        return 'Hispanic'\n",
    "    elif ethnicity in [\n",
    "        'ASIAN', 'ASIAN - CHINESE', 'ASIAN - ASIAN INDIAN', \n",
    "        'ASIAN - VIETNAMESE', 'ASIAN - FILIPINO', 'ASIAN - CAMBODIAN', \n",
    "        'ASIAN - OTHER', 'ASIAN - KOREAN', 'ASIAN - JAPANESE', 'ASIAN - THAI'\n",
    "    ]:\n",
    "        return 'Asian'\n",
    "    else:\n",
    "        return 'Other'  # Group 'Native', 'Unknown', and others into 'Other'\n",
    "\n",
    "first_admissions['categorized_ethnicity'] = first_admissions['ETHNICITY'].apply(categorize_ethnicity)\n",
    "\n",
    "# Categorize insurance\n",
    "def categorize_insurance(insurance):\n",
    "    if 'MEDICARE' in insurance.upper():\n",
    "        return 'Medicare'\n",
    "    elif 'PRIVATE' in insurance.upper():\n",
    "        return 'Private'\n",
    "    elif 'MEDICAID' in insurance.upper():\n",
    "        return 'Medicaid'\n",
    "    elif 'SELF PAY' in insurance.upper():\n",
    "        return 'Self Pay'\n",
    "    else:\n",
    "        return 'Government'\n",
    "\n",
    "first_admissions['categorized_insurance'] = first_admissions['INSURANCE'].apply(categorize_insurance)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "49230db4-32f0-4cf1-b877-7b144a6b1213",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Shape: (36654, 44)\n",
      "Positive Short-Term Mortality Cases: 5993\n",
      "Positive Readmission Cases: 4247\n",
      "Positive Mechanical Ventilation Cases: 22920\n"
     ]
    }
   ],
   "source": [
    "# One-hot encoding for categorical columns\n",
    "first_admissions = pd.get_dummies(\n",
    "    first_admissions, \n",
    "    columns=['age_bucket', 'categorized_ethnicity', 'categorized_insurance'], \n",
    "    drop_first=False\n",
    ")\n",
    "\n",
    "# Display dataset shape and key outcomes\n",
    "print(f\"Dataset Shape: {first_admissions.shape}\")\n",
    "print(f\"Positive Short-Term Mortality Cases: {first_admissions['short_term_mortality'].sum()}\")\n",
    "print(f\"Positive Readmission Cases: {first_admissions['readmitted_within_30_days'].sum()}\")\n",
    "print(f\"Positive Mechanical Ventilation Cases: {first_admissions['ventilation_within_6_hours'].sum()}\")\n",
    "\n",
    "# Save structured data\n",
    "first_admissions.to_csv('structured_first_admissions.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "99306d25-815b-4aff-8304-e416000ea3e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['subject_id', 'ROW_ID_x', 'hadm_id', 'ADMITTIME', 'DISCHTIME',\n",
      "       'DEATHTIME', 'ADMISSION_TYPE', 'ADMISSION_LOCATION',\n",
      "       'DISCHARGE_LOCATION', 'INSURANCE', 'LANGUAGE', 'RELIGION',\n",
      "       'MARITAL_STATUS', 'ETHNICITY', 'EDREGTIME', 'EDOUTTIME', 'DIAGNOSIS',\n",
      "       'HOSPITAL_EXPIRE_FLAG', 'HAS_CHARTEVENTS_DATA', 'ROW_ID_y', 'GENDER',\n",
      "       'DOB', 'DOD', 'DOD_HOSP', 'DOD_SSN', 'EXPIRE_FLAG',\n",
      "       'short_term_mortality', 'readmitted_within_30_days',\n",
      "       'ventilation_within_6_hours', 'age', 'age_bucket_15-29',\n",
      "       'age_bucket_30-49', 'age_bucket_50-69', 'age_bucket_70-89',\n",
      "       'categorized_ethnicity_Asian', 'categorized_ethnicity_Black',\n",
      "       'categorized_ethnicity_Hispanic', 'categorized_ethnicity_Other',\n",
      "       'categorized_ethnicity_White', 'categorized_insurance_Government',\n",
      "       'categorized_insurance_Medicaid', 'categorized_insurance_Medicare',\n",
      "       'categorized_insurance_Private', 'categorized_insurance_Self Pay'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(first_admissions.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a95254af-1117-4f23-99c4-7439f8c80354",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ethnicity Summary:\n",
      "  Ethnicity  Count  Percentage\n",
      "0     Black   2858    7.797239\n",
      "1  Hispanic   1244    3.393900\n",
      "2     Other   5779   15.766356\n",
      "3     White  25896   70.649861\n",
      "\n",
      "Insurance Summary:\n",
      "  Insurance  Count  Percentage\n",
      "0  Medicaid   3163    8.629345\n",
      "1  Medicare  18527   50.545643\n",
      "2   Private  13259   36.173405\n",
      "3  Self Pay    542    1.478693\n",
      "\n",
      "Gender Summary:\n",
      "  Gender  Count  Percentage\n",
      "0      M  21178   57.778142\n",
      "1      F  15476   42.221858\n",
      "\n",
      "Age Bucket Summary:\n",
      "  Age Bucket  Count  Percentage\n",
      "0      15-29   2084    5.685600\n",
      "1      30-49   6249   17.048617\n",
      "2      50-69  14512   39.591859\n",
      "3      70-89  13809   37.673924\n"
     ]
    }
   ],
   "source": [
    "# Total count of records\n",
    "total_count = first_admissions.shape[0]\n",
    "\n",
    "# Ethnicity summary\n",
    "ethnicity_columns = [\n",
    "    'categorized_ethnicity_Black',\n",
    "    'categorized_ethnicity_Hispanic',\n",
    "    'categorized_ethnicity_Other',\n",
    "    'categorized_ethnicity_White'\n",
    "]\n",
    "ethnicity_summary = first_admissions[ethnicity_columns].sum().reset_index()\n",
    "ethnicity_summary.columns = ['Ethnicity', 'Count']\n",
    "ethnicity_summary['Ethnicity'] = ethnicity_summary['Ethnicity'].str.replace('categorized_ethnicity_', '')\n",
    "ethnicity_summary['Percentage'] = (ethnicity_summary['Count'] / total_count) * 100\n",
    "\n",
    "# Insurance summary\n",
    "insurance_columns = [\n",
    "    'categorized_insurance_Medicaid',\n",
    "    'categorized_insurance_Medicare',\n",
    "    'categorized_insurance_Private',\n",
    "    'categorized_insurance_Self Pay'\n",
    "]\n",
    "insurance_summary = first_admissions[insurance_columns].sum().reset_index()\n",
    "insurance_summary.columns = ['Insurance', 'Count']\n",
    "insurance_summary['Insurance'] = insurance_summary['Insurance'].str.replace('categorized_insurance_', '')\n",
    "insurance_summary['Percentage'] = (insurance_summary['Count'] / total_count) * 100\n",
    "\n",
    "# Gender summary\n",
    "gender_summary = first_admissions['GENDER'].value_counts().reset_index()\n",
    "gender_summary.columns = ['Gender', 'Count']\n",
    "gender_summary['Percentage'] = (gender_summary['Count'] / total_count) * 100\n",
    "\n",
    "# Age bucket summary\n",
    "age_summary = first_admissions[['age_bucket_15-29', 'age_bucket_30-49', 'age_bucket_50-69', 'age_bucket_70-89']].sum().reset_index()\n",
    "age_summary.columns = ['Age Bucket', 'Count']\n",
    "age_summary['Age Bucket'] = age_summary['Age Bucket'].str.replace('age_bucket_', '')\n",
    "age_summary['Percentage'] = (age_summary['Count'] / total_count) * 100\n",
    "\n",
    "# Display summaries\n",
    "print(\"Ethnicity Summary:\")\n",
    "print(ethnicity_summary)\n",
    "\n",
    "print(\"\\nInsurance Summary:\")\n",
    "print(insurance_summary)\n",
    "\n",
    "print(\"\\nGender Summary:\")\n",
    "print(gender_summary)\n",
    "\n",
    "print(\"\\nAge Bucket Summary:\")\n",
    "print(age_summary)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0772985d-c167-4382-b4bd-0728e3624596",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ethnicity Summary by Gender:\n",
      "GENDER                     F      M  Total  Percentage\n",
      "categorized_ethnicity                                 \n",
      "Asian                    376    501    877    2.392645\n",
      "Black                   1525   1333   2858    7.797239\n",
      "Hispanic                 489    755   1244    3.393900\n",
      "Other                   2257   3522   5779   15.766356\n",
      "White                  10829  15067  25896   70.649861\n",
      "\n",
      "Insurance Summary by Gender:\n",
      "GENDER                    F     M  Total  Percentage\n",
      "categorized_insurance                               \n",
      "Government              441   722   1163    3.172914\n",
      "Medicaid               1352  1811   3163    8.629345\n",
      "Medicare               8614  9913  18527   50.545643\n",
      "Private                4932  8327  13259   36.173405\n",
      "Self Pay                137   405    542    1.478693\n",
      "\n",
      "Age Bucket Summary by Gender:\n",
      "GENDER         F     M  Total  Percentage\n",
      "age_bucket                               \n",
      "15-29        828  1256   2084    5.685600\n",
      "30-49       2529  3720   6249   17.048617\n",
      "50-69       5498  9014  14512   39.591859\n",
      "70-89       6621  7188  13809   37.673924\n",
      "\n",
      "Summary tables have been saved as CSV files.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Reverse one-hot encoding for ethnicity, insurance, and age bucket\n",
    "def reverse_one_hot(df, prefix, new_column_name):\n",
    "    cols = [col for col in df.columns if col.startswith(prefix)]\n",
    "    df[new_column_name] = df[cols].idxmax(axis=1).str.replace(f'{prefix}_', '', regex=False)\n",
    "    return df\n",
    "\n",
    "# Reverse one-hot encoding for ethnicity, insurance, and age bucket\n",
    "first_admissions = reverse_one_hot(first_admissions, 'categorized_ethnicity', 'categorized_ethnicity')\n",
    "first_admissions = reverse_one_hot(first_admissions, 'categorized_insurance', 'categorized_insurance')\n",
    "first_admissions = reverse_one_hot(first_admissions, 'age_bucket', 'age_bucket')\n",
    "\n",
    "# Function to create summary table for a given column (e.g., ethnicity, insurance, or age bucket)\n",
    "def create_summary_table(column_name, gender_column='GENDER'):\n",
    "    # Group by the specified column and gender\n",
    "    summary = first_admissions.groupby([column_name, gender_column]).size().unstack(fill_value=0)\n",
    "    summary['Total'] = summary.sum(axis=1)  # Calculate total for each category\n",
    "    summary['Percentage'] = (summary['Total'] / first_admissions.shape[0]) * 100  # Calculate percentage\n",
    "    return summary\n",
    "\n",
    "# Ethnicity summary by gender\n",
    "ethnicity_summary = create_summary_table('categorized_ethnicity')\n",
    "\n",
    "# Insurance summary by gender\n",
    "insurance_summary = create_summary_table('categorized_insurance')\n",
    "\n",
    "# Age bucket summary by gender\n",
    "age_bucket_summary = create_summary_table('age_bucket')\n",
    "\n",
    "# Display summaries\n",
    "print(\"Ethnicity Summary by Gender:\")\n",
    "print(ethnicity_summary)\n",
    "\n",
    "print(\"\\nInsurance Summary by Gender:\")\n",
    "print(insurance_summary)\n",
    "\n",
    "print(\"\\nAge Bucket Summary by Gender:\")\n",
    "print(age_bucket_summary)\n",
    "\n",
    "# Save summaries to CSV\n",
    "ethnicity_summary.to_csv('ethnicity_summary_by_gender.csv', index=True)\n",
    "insurance_summary.to_csv('insurance_summary_by_gender.csv', index=True)\n",
    "age_bucket_summary.to_csv('age_bucket_summary_by_gender.csv', index=True)\n",
    "\n",
    "print(\"\\nSummary tables have been saved as CSV files.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a947dc56-64ae-4f0c-88a8-6c82df1b8686",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
